{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "f97ad571-a602-364c-acc2-b2be930be42d",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In the provided code snippet, the `fprintf` function is used, which can potentially lead to format string vulnerabilities if the format string is not controlled by the programmer or if user-supplied data is used as a format string.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fprintf`, consider using `fputs` or `fwrite` which do not interpret the format string. Always validate and sanitize user input and avoid using user-supplied data in format strings.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the provided code snippet:\n\n```cpp\nstd::ostringstream oss;\noss << \"VA OVERLAP DETECTED: (rhs.va >= lhs.va) && (rhs.va < lhs.va + lhs.size) rhs.va: \"\n    << std::hex << rhs.va\n    << \" rhs.pa: \" << rhs.pa\n    << \" rhs.size:\" << rhs.size\n    << \" lhs.va: \" << lhs.va\n    << \" lhs.pa: \" << lhs.pa\n    << \" lhs.size:\" << lhs.size << \"\\n\";\nfputs(oss.str().c_str(), stderr);\n```\n\n## Library Dependencies\n\nThe provided code snippet requires the following libraries:\n\n- `cstdio` for `fprintf` and `stderr`\n- `sstream` for `std::ostringstream` in the fixed code\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "3b7911ec-af41-3da3-88e4-d0eb5e09dd8c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code, the `fprintf` function is used, which can lead to format string vulnerabilities if not used properly.\n\nFormat string vulnerabilities occur when the submitted data of an input string is evaluated as a command by the application. In this case, the application is vulnerable because it directly uses input in the `fprintf` function, which can be exploited by an attacker to read the stack, write to arbitrary memory locations, or execute arbitrary code.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it's recommended to avoid using `fprintf` and similar functions that can lead to format string vulnerabilities. Instead, use safer alternatives that do not evaluate arguments as format specifiers.\n\n## Source Code Fix Recommendation\n\nThe code can be fixed by using `fputs` or `fwrite` instead of `fprintf`. Here is the fixed code:\n\n```cpp\nstd::ostringstream oss;\noss << \"PA OVERLAP DETECTED: (rhs.pa >= lhs.pa) && (rhs.pa < lhs.pa + lhs.size) rhs.va: \"\n    << \"0x\" << std::hex << rhs.va << \" rhs.pa: 0x\" << rhs.pa << \" rhs.size: 0x\" << rhs.size\n    << \" lhs.va: 0x\" << lhs.va << \" lhs.pa: 0x\" << lhs.pa << \" lhs.size:0x\" << lhs.size << \"\\n\";\nfputs(oss.str().c_str(), stderr);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries to execute properly:\n\n- `cstdio` for `stderr` and `fputs`\n- `sstream` for `std::ostringstream`\n- `iomanip` for `std::hex`\n\n## References\n\n- [CWE-134: Use of Externally-Controlled Format String](https://cwe.mitre.org/data/definitions/134.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "b23f41e0-0b50-3b8a-9cc2-d4b5dbd0d0fd",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, and integer overflows. In the provided code snippet, the `printf` function is used, which can lead to format string vulnerabilities if user-controlled input is passed as the format string argument.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these insecure functions. For instance, instead of `printf`, consider using `fprintf` or `snprintf` which are safer as they limit the amount of data that can be written, thus preventing buffer overflow vulnerabilities.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\nfprintf(stdout,\n      \"v:%d s:%d c:%d tmz:%d x:%d r:%d w:%d f:%d t:%d sw:%d pte:%d log:%d tf:%d mtype:%d \"\n      \"base:0x%012lx\\n\",\n      fields.valid, fields.system, fields.coherent, fields.tmz, fields.execute, fields.read,\n      fields.write, fields.fragment, fields.tiled, fields.sw, fields.pte, fields.log,\n      fields.translate_further, fields.mtype, fields.base_address);\n```\n\n## Library Dependencies\n\nThe code example requires the following library to execute properly:\n\n- `stdio.h` for `fprintf` function\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "3f2f5504-6520-3008-8b73-2c7731b5d76c",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure or unsafe C functions in a C++ program. In this case, the `fprintf` function is used to write formatted data to `stderr`. This function is considered unsafe because it does not perform bounds checking and can lead to buffer overflow vulnerabilities if not used carefully.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives that perform bounds checking, such as `snprintf` or `fprintf_s` (in C11). These functions prevent buffer overflow by ensuring that the number of characters written into the buffer does not exceed its size.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code using `snprintf`:\n\n```cpp\nchar buffer[256];\nsnprintf(buffer, sizeof(buffer),\n         \"PA OVERLAP DETECTED: (lhs.pa >= rhs.pa) && (lhs.pa < rhs.pa + rhs.size) lhs.va: \"\n         \"0x%016lx lhs.pa: 0x%016lx lhs.size: 0x%016lx \"\n         \"rhs.va: 0x%016lx \"\n         \"rhs.pa: 0x%016lx \"\n         \"rhs.size:0x%016lx\\n\",\n         lhs.va, lhs.pa, lhs.size, rhs.va, rhs.pa, rhs.size);\nfputs(buffer, stderr);\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<stdio.h>`: for `fprintf` and `stderr`\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "430d4750-5fac-3b91-b24a-002da83d17c8",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In this case, the `std::getenv` function is used, which can lead to security vulnerabilities. This function returns a pointer to the value in the environment, or NULL if there is no match. The returned pointer might get invalidated or the associated string content might get overwritten by subsequent calls to getenv() or other functions from the library.\n\n## Mitigation Advice\n\nAvoid using `std::getenv` function. Instead, consider using more secure alternatives that are less prone to vulnerabilities. Always validate and sanitize the input and output of your program. Be aware of the potential security risks associated with the use of certain C library functions.\n\n## Source Code Fix Recommendation\n\nInstead of using `std::getenv`, consider using a more secure alternative. For example, you can use the `std::getenv_s` function, which is a safer version of `std::getenv`. Here is how you can modify the code:\n\n```cpp\nchar* char_override;\nsize_t requiredSize;\n\ngetenv_s(&requiredSize, NULL, 0, \"ROCSIFT_DEVID_OVERRIDE\");\nif (requiredSize == 0)\n{\n    printf(\"ROCSIFT_DEVID_OVERRIDE doesn't exist!\\n\");\n    exit(1);\n}\n\nchar_override = (char*) malloc(requiredSize * sizeof(char));\nif (!char_override)\n{\n    printf(\"Failed to allocate memory!\\n\");\n    exit(1);\n}\n\ngetenv_s(&requiredSize, char_override, requiredSize, \"ROCSIFT_DEVID_OVERRIDE\");\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This header defines several general purpose functions, including dynamic memory management, random number generation, communication with the environment, integer arithmetics, searching, sorting and converting.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "20802372-d192-3159-93d1-35a798e7fc7b",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability refers to the use of C standard library functions that are considered unsafe due to their potential to cause buffer overflows, format string vulnerabilities, or other security issues. In the provided code snippet, the function `std::strerror(errno)` is used, which is not thread-safe and can lead to race conditions if used in a multi-threaded context.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use thread-safe alternatives to unsafe C functions. In the case of `std::strerror(errno)`, a thread-safe alternative is `strerror_r()`. However, this function is not part of the C++ standard library and its behavior can vary between different systems. A more portable and C++-idiomatic solution is to use exceptions for error handling.\n\n## Source Code Fix Recommendation\n\nReplace the use of `std::strerror(errno)` with an exception-based error handling mechanism. Here is an example of how to do this:\n\n```cpp\ntry {\n    // Call to execv(...) here\n    throw std::system_error(errno, std::generic_category());\n} catch (const std::system_error& e) {\n    std::cerr << \"ERROR: execv(...) returned \" << rc << \" and set error: \" << e.what() << std::endl;\n}\n```\n\n## Library Dependencies\n\nThe provided code snippet requires the following library dependencies:\n\n- iostream\n- cstring\n- cerrno\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c27cc8fd-55b6-3239-915f-4671fe51372b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In the provided code snippet, the `fprintf` function is used, which can lead to format string vulnerabilities if the format string is not controlled by the programmer or if user-supplied data is used as a format string.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use safer alternatives to these functions. For instance, instead of `fprintf`, consider using `fputs` or `fwrite`. If `fprintf` must be used, ensure that the format string is not user-controlled and does not contain any user-supplied data.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the provided code snippet:\n\n```cpp\nstd::ostringstream oss;\noss << \"DUPLICATE: lhs == rhs! rhs.va: 0x\" << std::hex << rhs.va\n    << \" rhs.pa: 0x\" << rhs.pa << \" rhs.size:0x\" << rhs.size\n    << \" lhs.va: 0x\" << lhs.va << \" lhs.pa: 0x\" << lhs.pa\n    << \" lhs.size:0x\" << lhs.size << \"\\n\";\nfputs(oss.str().c_str(), stderr);\n```\n\n## Library Dependencies\n\nThe provided code snippet requires the following libraries:\n\n- `cstdio` for `fprintf` and `stderr`\n- `sstream` for `std::ostringstream` in the fixed code\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "4db58a65-5904-316e-8935-c26373718bbf",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In the provided code snippet, the function `strerror()` is used, which is not thread-safe and can lead to race conditions if used in a multi-threaded environment.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strerror()`. Instead, use thread-safe alternatives like `strerror_r()` in POSIX or `strerror_s()` in Windows. Also, consider using higher-level abstractions provided by the C++ Standard Library or other libraries that are safer and less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace the `strerror()` function with its thread-safe counterpart `strerror_r()`:\n\n```cpp\nchar buf[1024];\nstrerror_r(errno, buf, sizeof(buf));\nLogger()->error(\"failed to open {}, {}\", vram.string(), buf);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- A logging library that provides the `Logger()` function (e.g., spdlog)\n- `<cstring>` for `strerror_r()`\n- `<cerrno>` for `errno`\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d3db7d33-2c4f-3c73-bff6-4522d9ffb33a",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In this case, the function `std::getenv()` is used, which can lead to security vulnerabilities. This function returns a pointer to the value in the environment, or NULL if there is no match. The returned pointer might be invalidated or the string content might be overwritten by another call to `getenv()`, `setenv()`, `putenv()`, `unsetenv()`, `clearenv()`. \n\n## Mitigation Advice\n\nAvoid using `std::getenv()` function directly. Instead, consider using safer alternatives that are less prone to security issues. Always validate and sanitize the input to these functions to prevent potential security vulnerabilities.\n\n## Source Code Fix Recommendation\n\nInstead of using `std::getenv()`, consider using a safer alternative. For example, you can use a wrapper function that checks the validity of the environment variable before accessing it.\n\n```cpp\n#include <cstdlib>\n#include <string>\n#include <optional>\n\nstd::optional<std::string> safe_getenv(const std::string& var) {\n    if(const char* val = std::getenv(var.c_str())) {\n        return std::string(val);\n    }\n    return std::nullopt;\n}\n\n// Usage\nauto val = safe_getenv(var);\nif(val.has_value()) {\n    // Use val.value()\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cstdlib>`: This header defines several general purpose functions, including dynamic memory management, random number generation, communication with the environment, integer arithmetics, searching, sorting and converting.\n\n- `<string>`: This header introduces string types, character traits and a set of converting functions.\n\n- `<optional>`: This header file contains the std::optional class template.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-community/attacks/Buffer_overflow_attack)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8bec87dd-3040-32e4-a178-bcea09a1b473",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In this case, the `fprintf` function is used, which can lead to format string vulnerabilities if user-controlled input is passed as the format string argument.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using insecure C library functions. Instead, use safer alternatives provided by the language. For instance, in C++, you can use the stream operations provided by the `iostream` library which are type-safe and do not suffer from format string vulnerabilities.\n\n## Source Code Fix Recommendation\n\nReplace the `fprintf` function with `cerr` from the `iostream` library:\n\n```cpp\n#include <iostream>\n\n// ...\n\nstd::cerr << \"Failed to get runlists (are any active?), please make sure you are running as root!\\n\";\n```\n\n## Library Dependencies\n\nThe original code requires the `stdio.h` library for the `fprintf` function. The fixed code requires the `iostream` library for `std::cerr`.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "13d118a2-3fbe-39fd-8f2d-621a084301cd",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In the provided code snippet, the function `strerror()` is used, which is not thread-safe and can lead to race conditions if used in a multi-threaded environment.\n\n## Mitigation Advice\n\nAvoid using non-reentrant functions like `strerror()`. Instead, use thread-safe alternatives like `strerror_r()` in POSIX or `strerror_s()` in Windows. Also, consider using higher-level abstractions provided by the C++ Standard Library, which are usually safer and less error-prone.\n\n## Source Code Fix Recommendation\n\nReplace the `strerror()` function with its thread-safe counterpart `strerror_r()`:\n\n```cpp\nchar buf[1024];\nstrerror_r(errno, buf, sizeof(buf));\nLogger()->warn(\"Failed to close fd {}: {}\", fd_, buf);\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<cstring>` for `strerror_r()`\n- `<errno.h>` for `errno`\n- A logging library that provides the `Logger()` function and supports format strings.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "b15d27ee-99e9-3cae-ae5d-98a50e553492",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability refers to the use of insecure C library functions in C++ code. These functions are often prone to buffer overflow attacks, format string vulnerabilities, or other types of security issues. In the provided code snippet, the `std::getenv` function is used, which can lead to security vulnerabilities. This function returns a pointer to a string that is stored in an environment block associated with the process. If the environment variable is changed, the pointer returned by `std::getenv` may become invalid.\n\n## Mitigation Advice\n\nAvoid using `std::getenv` function directly. Instead, consider using safer alternatives that do not have the same vulnerabilities. If you must use `std::getenv`, ensure that the returned pointer is not directly exposed to the user or used in a way that could lead to security vulnerabilities.\n\n## Source Code Fix Recommendation\n\n```cpp\nconst char* log_level = std::getenv(\"ROCSIFT_LOG_LEVEL\");\nif (log_level != nullptr) {\n    cloglevel = std::string(log_level);\n} else {\n    // Handle the case where the environment variable is not set.\n}\n```\n\nIn this code, we first check if the environment variable is set. If it is, we copy its value into a `std::string` object. This ensures that even if the environment variable changes, our copy of its value remains valid.\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- `<cstdlib>`: for `std::getenv`\n- `<string>`: for `std::string`\n\n## References\n\n- [OWASP C++](https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "53838947-b441-3d09-90fb-a589d1bea402",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `std::to_string(errno)` is used, which is not inherently insecure, but the use of `errno` can lead to misleading results if not properly checked or handled, as it might not always contain the error from the last system call.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to avoid using `errno` directly without proper error checking. Instead, use the return value of the function to check for errors. If the function indicates an error, then `errno` can be used to get more specific error information.\n\n## Source Code Fix Recommendation\n\nInstead of using `std::to_string(errno)`, use the return value of the function to check for errors. Here is an example:\n\n```cpp\n#include <cerrno>\n#include <cstring>\n#include <iostream>\n\nint main() {\n    errno = 0;\n    // some system call\n    if (/* system call failed */) {\n        std::cerr << \"System call failed with error: \" << std::strerror(errno) << '\\n';\n    }\n    return 0;\n}\n```\n\nIn this example, `errno` is only used if the system call failed, and `std::strerror` is used to get a human-readable string describing the error.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cerrno>`: For `errno`.\n- `<cstring>`: For `std::strerror`.\n- `<iostream>`: For `std::cerr`.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "4802ef32-f5bd-32f7-8c0e-61a7bfac9cc9",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ programming language refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `std::to_string(errno)` is used, which is not inherently insecure, but the use of `errno` can lead to misleading results if not properly checked or handled, as it might not always contain the error from the last system call.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to avoid using `errno` directly without proper error checking. Instead, use the return value of the function to check for errors. If the function indicates an error, then `errno` can be used to get more specific error information.\n\n## Source Code Fix Recommendation\n\nInstead of using `std::to_string(errno)`, use the return value of the function to check for errors. Here is an example:\n\n```cpp\n#include <cerrno>\n#include <cstring>\n#include <iostream>\n\nint main() {\n    errno = 0;\n    // some system call\n    if (/* system call failed */) {\n        std::cerr << \"System call failed with error: \" << std::strerror(errno) << '\\n';\n    }\n    return 0;\n}\n```\n\nIn this example, `errno` is only used if the system call failed, and `std::strerror` is used to get a human-readable string describing the error.\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<cerrno>`: For `errno`.\n- `<cstring>`: For `std::strerror`.\n- `<iostream>`: For `std::cerr`.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-628: Function Call with Incorrectly Specified Arguments](https://cwe.mitre.org/data/definitions/628.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "a3ff0b55-d6c5-3859-9ca4-84380895bb81",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe \"Prohibited C Function Identified\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, or integer overflows. In the provided code snippet, the function `strerror()` is used, which is not thread-safe and can lead to race conditions if used in a multi-threaded environment.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, it is recommended to use secure alternatives to these insecure C library functions. In the case of `strerror()`, a thread-safe alternative such as `strerror_r()` can be used.\n\n## Source Code Fix Recommendation\n\nHere is a fixed version of the code:\n\n```cpp\nchar buf[1024];\nif (strerror_r(errno, buf, sizeof(buf)) == 0) {\n    Logger()->error(\"failed to set GRBM bank: \", buf);\n} else {\n    Logger()->error(\"failed to set GRBM bank: error message unavailable\");\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following libraries:\n\n- A logging library that provides the `Logger()` function.\n- The C Standard Library for the `strerror_r()` and `errno` functions.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "c46d6412-c0a8-36b1-8677-a3825da2f03b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other issues. These functions are often prohibited in secure coding standards. The use of these functions can lead to serious security vulnerabilities including code execution, privilege escalation, or denial of service.\n\nIn the provided code snippet, `regs2.string()` is not a C function, so it doesn't directly relate to the \"Detected Prohibited C Function\" vulnerability. However, if it's used improperly, it might lead to other types of vulnerabilities.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, avoid using dangerous C functions. Instead, use safer alternatives provided by the C++ Standard Library or other libraries that perform bounds checking and other safety measures. Always validate and sanitize input data. \n\n## Source Code Fix Recommendation\n\nAs `regs2.string()` is not a C function and doesn't directly relate to the \"Detected Prohibited C Function\" vulnerability, a specific fix cannot be provided without more context. However, ensure that the string returned by `regs2.string()` is used safely and properly in the rest of your code.\n\n## Library Dependencies\n\nThe code snippet provided doesn't indicate any specific library dependencies. However, the `regs2` object seems to be of a type that has a `string()` member function. The specific libraries required would depend on the type of `regs2`.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_v2.pdf)\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "fc8936f3-05a2-3afe-a337-bd28f0ad4094",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. These functions are often prohibited because they do not perform bounds checking or input validation, which can lead to vulnerabilities if not handled properly.\n\nIn the given sink `iomem.string()`, the vulnerability might not be directly related to prohibited C functions, but it could be a potential security risk if the string data from `iomem` is used in an insecure manner.\n\n## Mitigation Advice\n\nTo mitigate this type of vulnerability, it is recommended to:\n\n- Avoid using insecure C library functions. Use safer alternatives whenever possible.\n- Always perform bounds checking and input validation.\n- Use modern C++ features and libraries that provide more secure functionality.\n\n## Source Code Fix Recommendation\n\nWithout the complete context of the code, it's hard to provide a specific fix. However, if `iomem.string()` is used in an insecure manner, you should validate and sanitize the data before use. If it's used to create a C-style string, consider using `std::string` or other C++ string classes instead.\n\n## Library Dependencies\n\nThe specific library dependencies would depend on the rest of the code. However, the `string()` function is a member of `std::stringstream`, `std::ostringstream`, and `std::istringstream` classes, which are part of the `<sstream>` library in C++.\n\n## References\n\n- [CWE-676: Use of Potentially Dangerous Function](https://cwe.mitre.org/data/definitions/676.html)\n\nPlease note that the links provided are active and accessible for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "f97ad571-a602-364c-acc2-b2be930be42d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/xlator/xlator.c"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 11,
                  "charOffset": 1537,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3b7911ec-af41-3da3-88e4-d0eb5e09dd8c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/xlator/xlator.c"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 4,
                  "endLine": 60,
                  "endColumn": 11,
                  "charOffset": 1941,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "b23f41e0-0b50-3b8a-9cc2-d4b5dbd0d0fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/xlator/xlator.c"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 2,
                  "endLine": 220,
                  "endColumn": 8,
                  "charOffset": 7061,
                  "charLength": 6,
                  "snippet": {
                    "text": "printf",
                    "rendered": {
                      "text": "printf",
                      "markdown": "`printf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "3f2f5504-6520-3008-8b73-2c7731b5d76c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/xlator/xlator.c"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 4,
                  "endLine": 69,
                  "endColumn": 11,
                  "charOffset": 2347,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "430d4750-5fac-3b91-b24a-002da83d17c8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/kfd/kfdnode.cc"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 29,
                  "endLine": 248,
                  "endColumn": 35,
                  "charOffset": 10253,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "20802372-d192-3159-93d1-35a798e7fc7b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/rocsift_tools.cc"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 81,
                  "endLine": 110,
                  "endColumn": 89,
                  "charOffset": 3404,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c27cc8fd-55b6-3239-915f-4671fe51372b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/xlator/xlator.c"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 44,
                  "endColumn": 11,
                  "charOffset": 1212,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "4db58a65-5904-316e-8935-c26373718bbf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_vram_accessor.cc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 66,
                  "endLine": 20,
                  "endColumn": 74,
                  "charOffset": 481,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d3db7d33-2c4f-3c73-bff6-4522d9ffb33a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/rocsift_tools.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 18,
                  "endLine": 32,
                  "endColumn": 24,
                  "charOffset": 756,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8bec87dd-3040-32e4-a178-bcea09a1b473",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/dumprls.cc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 4,
                  "endLine": 199,
                  "endColumn": 11,
                  "charOffset": 6694,
                  "charLength": 7,
                  "snippet": {
                    "text": "fprintf",
                    "rendered": {
                      "text": "fprintf",
                      "markdown": "`fprintf`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "13d118a2-3fbe-39fd-8f2d-621a084301cd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/fdowner.cc"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 55,
                  "endLine": 30,
                  "endColumn": 63,
                  "charOffset": 632,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "b15d27ee-99e9-3cae-ae5d-98a50e553492",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/engine.cc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 35,
                  "endLine": 20,
                  "endColumn": 41,
                  "charOffset": 436,
                  "charLength": 6,
                  "snippet": {
                    "text": "getenv",
                    "rendered": {
                      "text": "getenv",
                      "markdown": "`getenv`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "53838947-b441-3d09-90fb-a589d1bea402",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_mmio_accessor.cc"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 43,
                  "endLine": 78,
                  "endColumn": 51,
                  "charOffset": 2386,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "4802ef32-f5bd-32f7-8c0e-61a7bfac9cc9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_mmio_accessor.cc"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 43,
                  "endLine": 61,
                  "endColumn": 51,
                  "charOffset": 1814,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "a3ff0b55-d6c5-3859-9ca4-84380895bb81",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "\"Prohibited C Function Identified\""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_mmio_accessor.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 49,
                  "endLine": 52,
                  "endColumn": 57,
                  "charOffset": 1522,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "c46d6412-c0a8-36b1-8677-a3825da2f03b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_mmio_accessor.cc"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 42,
                  "endLine": 26,
                  "endColumn": 50,
                  "charOffset": 663,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "fc8936f3-05a2-3afe-a337-bd28f0ad4094",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sift/debugfs_iomem_accessor.cc"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 42,
                  "endLine": 21,
                  "endColumn": 50,
                  "charOffset": 552,
                  "charLength": 8,
                  "snippet": {
                    "text": "strerror",
                    "rendered": {
                      "text": "strerror",
                      "markdown": "`strerror`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}